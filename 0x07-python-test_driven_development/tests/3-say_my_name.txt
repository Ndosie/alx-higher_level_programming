===========================
How to use 3-say_my_name.py
===========================

This library has only one function called ``say_my_name()``. Which prints
message with names passed as arguments.

Strings
=======

::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("Carrie", "Sanga")
	My name is Carrie Sanga

Passing one argument it will prints as the second argument is by default
empty string

::

	>>> say_my_name("Carrie")
	My name is Carrie 

Passing empty strings it will print with empty name

::

	>>> say_my_name("", "")
	My name is  

Non String
==========
Passing arguments of types other than String it will raise TypeError

::

	>>> say_my_name(3)
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name("Carrie", 3)
	Traceback (most recent call last):
        TypeError: last_name must be a string

Passing no arguments it will raise TypeError

::

	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Passing None as argument it will raise TypeError

::

	>>> say_my_name(None)
	Traceback (most recent call last):
        TypeError: first_name must be a string
