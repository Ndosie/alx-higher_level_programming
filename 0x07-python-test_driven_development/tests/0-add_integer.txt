===========================
How to Use 0-add_integer.py
===========================

This library is very simple, since it only has one function called ``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments. For numbers, that value is
equivalent to using the ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 5)
	7

It also works with floating point numbers but it has to change them in integers.

::

	>>> add_integer(2.0, 5.0)
	7

It also works with one argument second argument is optional, by default it 98.

::

	>>> add_integer(1)
	99

Non-Numbers
===========

``add_integer`` only works with intergers and floats. Other values it will raise
TypeError

::

	>>> add_integer('a', 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2, 'b')
        Traceback (most recent call last):
        TypeError: b must be an integer

::
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

The function will fail if infinity is provided
::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(3, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

For NaN numbers ValueError will be raised
::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::
	
	>>> add_integer(4, float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
