==============================
How to Use 2-matrix_divided.py
==============================

This library is very simple, since it only has one function called ``martix_divided()``.
The function accepts two arguments `matrix` and `div` and divides each element from
the `matrix` by `div` and returs a new matrix

Numbers
=======

``martix_divided()`` returns the new matrix divided by ``div``.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[2, 4], [6, 8]], 2)
	[[1.0, 2.0], [3.0, 4.0]]

If martix has no equal rows it raises TypeError

::

	>>> matrix_divided([[2, 4], [6]], 2)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

If div is zero it raises ZeroDivisionError

::

	>>> matrix_divided([[2, 4, 5], [3, 4, 5]], 0)
	Traceback (most recent call last):
        ZeroDivisionError: division by zero

If div is float(inf) all values becames 0.0

::

	>>> matrix_divided([[2, 3, 4], [2, 3, 4]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
 

Non Numbers
===========

If the matrix has element which is not integer or float it raises TypeError

::

	>>> matrix_divided([[2, 4, '3'], [3, 3, 4]], 3)
	Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

If div is not integer or float it raises Type Error
	
::

	>>> matrix_divided([[2, 3], [2, 4]], '2')
	Traceback (most recent call last):
        TypeError: div must be a number

If one or two arguments are missing it will raise TypeError

::
	
	>>> matrix_divided([3])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

::

	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

If None is passed as a matrix, empty matrix or other value other than a list it will raise TypeError

::

	>>> matrix_divided(None, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix_divided([], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix_divided(3, 4)
	Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats
